package fixtures

import (
	"fmt"
	"net/http"
	"strings"
)

var appGQLTemplate = `# Code generated by Compass integration tests, DO NOT EDIT.
mutation {
			result: registerApplication(in: {
		name: "wordpress",
		providerName: "provider name",
		description: "my first wordpress application",
		labels: {group:["production","experimental"],scenarios:["DEFAULT"],},
		healthCheckURL: "http://mywordpress.com/health",
    bundles: [{
		name: "foo"
		description: "Foo bar"
      apiDefinitions: [ {
      name: "comments-v1",
      description: "api for adding comments",
      targetURL: "http://mywordpress.com/comments",
      group: "comments",
      spec:{
      data: "{\"openapi\":\"%s"}",	
      type: OPEN_API,
      format: YAML,
    },
      version:{
      value: "v1",
      deprecated: true,
      deprecatedSince: "v5",
      forRemoval: false,
    },
    }]
  }]
	}) {
		id
  }
}`

func FixHTTPBigBodyPOSTRequest(url string, bodySize int) (*http.Request, error) {
	var b strings.Builder
	b.Grow(bodySize)
	for i := 0; i < bodySize; i++ {
		b.WriteByte('a')
	}
	s := b.String()
	appGQL := fmt.Sprintf(`mutation {
			result: registerApplication(in: %s) {
					id
				}
			}`, fmt.Sprintf(appGQLTemplate, s))

	reader := strings.NewReader(appGQL)
	return http.NewRequest(http.MethodPost, url, reader)
}
